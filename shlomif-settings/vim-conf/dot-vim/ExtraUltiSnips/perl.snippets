snippet #!
#!/usr/bin/env perl

endsnippet

# Hash Pointer
snippet .
=>
endsnippet

# Function
snippet sub
sub ${1:function_name}
{
	${2:#body ...}
}
endsnippet

# Conditional
snippet if
if (${1})
{
	${2:# body...}
}
endsnippet

# Conditional if..else
snippet ife
if (${1})
{
	${2:# body...}
}
else
{
	${3:# else...}
}
endsnippet

# Conditional if..elsif..else
snippet ifee
if (${1})
{
	${2:# body...}
}
elsif (${3})
{
	${4:# elsif...}
}
else
{
	${5:# else...}
}
endsnippet

# Conditional One-line
snippet xif
${1:expression} if ${2:condition};${3}
endsnippet

# Unless conditional
snippet unless
unless (${1})
{
	${2:# body...}
}
endsnippet

# Unless conditional One-line
snippet xunless
${1:expression} unless ${2:condition};${3}
endsnippet

# Try/Except
snippet eval
eval
{
	${1:# do something risky...}
};
if ($@)
{
	${2:# handle failure...}
}
endsnippet

# While Loop
snippet wh
while (${1})
{
	${2:# body...}
}
endsnippet

# While Loop One-line
snippet xwh
${1:expression} while ${2:condition};${3}
endsnippet

# For Loop

snippet for
for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++})
{
	${4:# body...}
}
endsnippet

# Foreach Loop
snippet fore
foreach my $${1:x} (@${2:array})
{
	${3:# body...}
}
endsnippet
# Foreach Loop One-line

snippet xfore
${1:expression} foreach @${2:array};${3}
endsnippet

# Package / class (cl)
snippet cl
package ${1:ClassName};

use parent qw(${2:ParentClass});

sub new
{
	my $class = shift;

	my $self = bless {}, $class;

	$self->_init(@_);

	return $self;
}

sub _init
{
	my ($self, $args) = @_;

	return;
}

1;${3}
endsnippet

# Method
snippet meth
sub ${1:function_name}
{
	my $self = shift;

	${2:#body ...}

	return;
}

endsnippet

# Method with return
snippet methr
sub ${1:function_name}
{
	my $self = shift;

	return ${2:ret};
}

endsnippet

# Method with params
snippet methp
sub ${1:function_name}
{
	my ($self,${2:param}) = @_;

	return;
}

endsnippet

# Method with args
snippet metha
sub ${1:function_name}
{
	my ($self, $args) = @_;

	return;
}

endsnippet

snippet ltb
local $Test::Builder::Level = $Test::Builder::Level + 1;
endsnippet

snippet xsor
sub ${1:field}
{
	my $self = shift;

	if (@_)
	{
		$self->{$1} = shift;
	}

	return $self->{$1};
}
endsnippet

snippet strict
use strict;
use warnings;
endsnippet

snippet _slurp
sub _slurp
{
	my $filename = shift;

	open my $in, '<', $filename
		or die "Cannot open '$filename' for slurping - $!";

	local $/;
	my $contents = <$in>;

	close($in);

	return $contents;
}

endsnippet

snippet _write_file
sub _write_utf8_file
{
	my ($out_path, $contents) = @_;

	open my $out_fh, '>:encoding(utf8)', $out_path
		or die "Cannot open '$out_path' for writing - $!";

	print {$out_fh} $contents;

	close($out_fh);

	return;
}
endsnippet

snippet ok
# TEST
ok($1, "$2");
endsnippet

# Some boilerplate for Project Euler challenges.
snippet euler

use integer;
use bytes;

use Math::BigInt lib => 'GMP', ':constant';

use List::Util qw(sum);
use List::MoreUtils qw();

STDOUT->autoflush(1);

endsnippet

# Some boilerplate for File handling
snippet files

use File::Spec;
use File::Basename (qw( basename dirname ));
use File::Temp (qw/ tempfile tempdir /);
use File::Path (qw/ rmtree mkpath /);

use IO::All qw / io /;

endsnippet

snippet testdiff

use Test::Differences (qw( eq_or_diff ));

endsnippet

snippet exp
use parent 'Exporter';

our @EXPORT_OK = (qw($1));
endsnippet

# Some boilerplate for Path::Tiny handling
snippet pa

use Path::Tiny qw/ path tempdir tempfile cwd /;

my $dir = tempdir();

my $fh = $dir->child("foo.txt");

endsnippet
